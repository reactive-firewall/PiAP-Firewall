#! /usr/bin/env bash

# Reactive-Firewall firewall config service
# ......................................................................
# Copyright (c) 2013-2019, Mr. Walls
# ......................................................................
# Licensed under MIT (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# ......................................................................
# http://www.github.com/reactive-firewall/PiAP-firewall/LICENSE.md
# ......................................................................
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ......................................................................

FIRST_IFACE=$(ip route show default | fgrep default | grep -oE "[dev]{3}\s[abelhstuwn]{3}[n]?[0-9]+\s" | cut -d \  -f 2 | head -n 1 )
LAST_IFACE=$(ip route | fgrep "10.0.40.1" | grep -oE "[dev]{3}\s[abelhstuwn]{3}[n]?[0-9]+\s" | cut -d \  -f 2 | tail -n 1 )
GW_IFACE=${FIRST_IFACE:-wlan0}
#GW_IP=$( ip route show default | fgrep $GW_IFACE | fgrep via | cut -d v -f 2 | cut -d \  -f 2 ) ;
GW_BCAST=255.255.255.255 ;
GW_MAC=$( ip addr show $GW_IFACE | fgrep ether | tr -s ' ' ' ' | cut -d \  -f 3 | cut -d \/ -f 1 ) ;
# GW host
GW_IP=$( ip addr show $GW_IFACE | fgrep inet | tr -s ' ' ' ' | cut -d \  -f 3 | cut -d \/ -f 1 )

#change if multi-homed
MY_MAIN_IFACE=$GW_IFACE ;
MY_MAIN_IP=$( ip addr show $MY_MAIN_IFACE | fgrep inet | tr -s ' ' ' ' | cut -d \  -f 3 | cut -d \/ -f 1 ) ;
MY_MAIN_MAC=$( ip addr show $MY_MAIN_IFACE | fgrep ether | tr -s ' ' ' ' | cut -d \  -f 3 | cut -d \/ -f 1 ) ;


MY_AUX_IFACE=${LAST_IFACE:-wlan1};
# used for special
MY_AUX_IP=10.0.40.1 ;
MY_AUX_MAC=$( ip addr show $MY_AUX_IFACE | fgrep ether | tr -s ' ' ' ' | cut -d \  -f 3 | cut -d \/ -f 1 ) ;
MY_AUX_MAC=${MY_AUX_MAC} ;

# unused
MY_OTHER_IFACE=${FIRST_IFACE:-wlan0};
MY_OTHER_IP=$( ip route show default | fgrep "${MY_OTHER_IFACE}" | grepCIDR | cut -d \  -f 1 | fgrep "/" | head -n 1 | sed -E -e 's/\//\\\\\//g' ) ;

# trusted LAN CIDR
#LAN_SUBNET=10.0.0.0\\/8 ;
LAN_SUBNET=10.0.40.0\\/24 ;

declare BASEFILEPATH=$(dirname "${0}")

#is this build for a server?
declare -i SERVER_FLAG=1

# is this build for a gateway system?
declare -i GATEWAY_FLAG=1

declare -r THEDATE=$(date)
echo "# Generated by reactive-firewall on ${THEDATE}"
wait;

# used for mangle table and such
if [[ -f "${BASEFILEPATH}/preamble.rules" ]] ; then
head -n 1000000 "${BASEFILEPATH}/preamble.rules"
fi

if [[ -f "${BASEFILEPATH}/gateway.rules" ]] ; then
if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
head -n 1000000 "${BASEFILEPATH}/gateway.rules"
fi
fi

echo ""
echo ""
echo $"*filter"
echo $":INPUT DROP [0:0]"
echo $":FORWARD DROP [0:0]"
echo $":OUTPUT DROP [0:0]"
echo ":input-tcp-control - [0:0]"
if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo ":forward-tcp-control - [0:0]"
fi
echo ":output-tcp-control - [0:0]"
echo ":input-udp-control - [0:0]"
if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo ":forward-udp-control - [0:0]"
fi
echo ":output-udp-control - [0:0]"
for SOME_FILE in $(ls -1 ${BASEFILEPATH:-./}/services | fgrep -v "tcp" | fgrep -v "udp" | fgrep -v "proxy" ) ; do

if [[ ( -e ${BASEFILEPATH:-./}/services/${SOME_FILE} ) ]] ; then
echo ":check-${SOME_FILE}-guestlist - [0:0]"
echo ":${SOME_FILE}-guestlist - [0:0]"
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo ":${SOME_FILE}-proxy-guestlist - [0:0]"
fi
fi
done

for RULE_FILE in "head" base icmp sctp tcp udp oddtypes "tail" ; do

if [[ -f "${BASEFILEPATH}/${RULE_FILE}.rules" ]] ; then

head -n 1000000 "${BASEFILEPATH}/${RULE_FILE}.rules" | grep -oE "^[-]{1}[A]{1}\s+[-a-z0-9_]+\s+" | cut -d \  -f 2 | sort | uniq | sed -E -e 's/^[[:print:]]+$/:& - [0:0]/g' >> "${BASEFILEPATH}/used_chains.tmp" ;
wait ;
fi

done

head -n 9000000 "${BASEFILEPATH}/used_chains.tmp" | sort | uniq


echo ""

if [[ (${GATEWAY_FLAG} -le 0 ) ]] ; then
# drop forwards if not a gateway
echo "-A forward-checktype -i lo -o lo -s 127.0.0.0/8 -d 127.0.0.0/8 -g just-accept" ;
wait ;
echo "-A forward-checktype -m comment --comment 'optimized-rule' -g just-drop" ;
wait ;
# drop TCP forwards if not a gateway
echo "-A forward-tcp -p tcp -g just-drop" ;
wait ;
# drop UDP forwards if not a gateway
echo "-A forward-udp -p udp -g just-drop" ;
wait ;
fi

for RULE_FILE in "head" icmp sctp tcp udp oddtypes base ; do

if [[ -f "${BASEFILEPATH}/${RULE_FILE}.rules" ]] ; then

head -n 1000000 "${BASEFILEPATH}/${RULE_FILE}.rules" ; wait ;

fi

done

# port that are never used and signal Intrusion
for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/tcp/black" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;
fi

echo "-A output-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;

done

echo ""
wait ;

# port that are never used but don't signal Intrusion
for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/tcp/close" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;
fi

echo "-A output-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;

done

echo ""
wait ;

# port that are never used and signal recon traffic
for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/tcp/decoy" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-tcp-control -p tcp -m multiport --dports ${TARGET_PORT} -g mark-as-scanner"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-tcp-control -i $GW_IFACE ! -o $GW_IFACE -p tcp -m multiport --dports ${TARGET_PORT} -g mark-as-scanner"
wait ;
echo "-A forward-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;
fi

echo "-A output-tcp-control -p tcp -m multiport --sports ${TARGET_PORT} -g just-drop"
wait ;

done

echo ""
wait ;

# ports that are open on the localhost only
for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/tcp/reserved" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-tcp-control -i lo -o lo -s 127.0.0.0/8 -d 127.0.0.0/8 -p tcp -m multiport --ports ${TARGET_PORT} -g just-accept"
wait ;
echo "-A forward-tcp-control ! -i $GW_IFACE -p tcp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;
echo "-A forward-tcp-control -i $GW_IFACE -p tcp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;
fi

echo "-A output-tcp-control -o lo -p tcp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;
echo "-A output-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;

echo ""
wait ;

done

echo "# uncomment below to allow unfiltered use of ssh "


# open ports for server services
for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/tcp/safe" | \grep -v -E "^[#[:space:]]*$" )
do
echo "-A input-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -m conntrack --ctstate ESTABLISHED -g accept-when-safe"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -m conntrack --ctstate NEW -g the-guestlist"
wait ;
echo "-A forward-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -m conntrack ! --ctstate NEW,INVALID -g check-the-guestlist"
wait ;
fi

echo "-A output-tcp-control -p tcp -m multiport --ports ${TARGET_PORT} -g accept-when-safe"
wait ;

echo ""
wait ;

done

for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/udp/black" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;
fi
echo "-A output-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g mark-as-blacklist"
wait ;

done

echo ""
wait ;

for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/udp/close" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;
fi

echo "-A output-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g close-and-drop"
wait ;

done

for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/udp/decoy" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g mark-as-scanner"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g mark-as-scanner"
wait ;
fi

echo "-A output-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;

done

echo ""
wait ;

for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/udp/reserved" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;
echo "-A forward-udp-control -i lo -o lo -p udp -m multiport --ports ${TARGET_PORT} -g just-accept"
wait ;

if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-udp-control ! -i $GW_IFACE -p udp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;
echo "-A forward-udp-control -i $GW_IFACE -p udp -m multiport --ports ${TARGET_PORT} -g just-drop"
wait ;
fi


echo "-A output-udp-control -o lo -p udp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;
echo "-A output-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g helpful-reject"
wait ;

echo ""
wait ;

done

for TARGET_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/ports/udp/safe" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A input-udp -p udp -m multiport --ports ${TARGET_PORT} -g accept-when-safe"
wait ;
if [[ (${GATEWAY_FLAG} -gt 0 ) ]] ; then
echo "-A forward-udp-control -p udp -m multiport --ports ${TARGET_PORT} -m conntrack ! --ctstate INVALID -g the-guestlist"
wait ;
echo "-A forward-udp-control -p udp -m multiport --ports ${TARGET_PORT} -m conntrack ! --ctstate INVALID -g check-the-guestlist"
wait ;
else
echo "-A forward-udp-control -p udp -i lo -o lo -m multiport --ports ${TARGET_PORT} -g accept-when-safe"
wait ;
fi
echo "-A output-udp-control -p udp -m multiport --ports ${TARGET_PORT} -g accept-when-safe"
wait ;

done

echo ""
wait ;

# TODO: improve preformance here by use of greedy algorythm
for SOME_FILE in $(ls -1 ${BASEFILEPATH:-./}/services | fgrep -v "tcp" | fgrep -v "udp" | fgrep -v "proxy" ) ; do

if [[ ( -e ${BASEFILEPATH:-./}/services/${SOME_FILE} ) ]] ; then
for SOME_PORT in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/services/${SOME_FILE}" | \grep -v -E "^[#[:space:]]*$" ) ; do
if [[ ( -e ${BASEFILEPATH:-./}/services/tcp/${SOME_FILE} ) ]] ; then
echo "-A input-tcp-custom -i $GW_IFACE -p tcp -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-I check-the-guestlist -i $GW_IFACE ! -o $GW_IFACE -p tcp -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
echo "-A forward-in-tcp-custom -i $GW_IFACE ! -o $GW_IFACE -p tcp -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
wait ;
echo "-I the-guestlist ! -i $GW_IFACE -o $GW_IFACE -p tcp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-proxy-guestlist"
echo "-A forward-out-tcp-custom ! -i $GW_IFACE -o $GW_IFACE -p tcp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-proxy-guestlist"
wait ;
fi
echo "-A output-tcp-custom -o $GW_IFACE -p tcp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-guestlist"
wait ;
fi

if [[ ( -e ${BASEFILEPATH:-./}/services/udp/${SOME_FILE} ) ]] ; then
echo "-A input-udp-custom -i $GW_IFACE -p udp -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-I check-the-guestlist -i $GW_IFACE ! -o $GW_IFACE -p udp -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
echo "-A forward-in-udp-custom -i $GW_IFACE -p udp ! -o $GW_IFACE -m multiport --sports ${SOME_PORT} -g check-${SOME_FILE}-guestlist"
wait ;
echo "-I the-guestlist ! -i $GW_IFACE -o $GW_IFACE -p udp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-proxy-guestlist"
echo "-A forward-out-udp-custom ! -i $GW_IFACE -o $GW_IFACE -p udp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-proxy-guestlist"
wait ;
fi
echo "-A output-udp-custom -o $GW_IFACE -p udp -m multiport --dports ${SOME_PORT} -g ${SOME_FILE}-guestlist"
wait ;
fi

if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
if [[ ( -e ${BASEFILEPATH:-./}/services/tcp/${SOME_FILE} ) ]] ; then
echo "-A ${SOME_FILE}-proxy-guestlist -p tcp -m multiport --dports ${SOME_PORT} -m conntrack ! --ctstate INVALID,NEW -m recent --name proxy${SOME_FILE}guestlist --rdest --update --seconds 60 -j accept-when-safe"
wait ;
echo "-A ${SOME_FILE}-proxy-guestlist -p tcp -m tcp ! --syn -m multiport --dports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rdest --remove -g just-accept"
wait ;
echo "-A ${SOME_FILE}-proxy-guestlist -p tcp -m multiport --dports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rdest --set -g accept-when-safe"
wait ;
fi
if [[ ( -e ${BASEFILEPATH:-./}/services/udp/${SOME_FILE} ) ]] ; then
echo "-A ${SOME_FILE}-proxy-guestlist -p udp -m multiport --dports ${SOME_PORT} -m conntrack ! --ctstate INVALID -m recent --name proxy${SOME_FILE}guestlist --rdest --update --seconds 30 -j just-accept"
wait ;
echo "-A ${SOME_FILE}-proxy-guestlist -p udp -m multiport --dports ${SOME_PORT} -m conntrack --ctstate INVALID -m recent --name proxy${SOME_FILE}guestlist --rdest --remove -g just-drop"
wait ;
echo "-A ${SOME_FILE}-proxy-guestlist -p udp -m multiport --dports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rdest --set -g just-accept"
wait ;
fi
fi

if [[ ( -e ${BASEFILEPATH:-./}/services/tcp/${SOME_FILE} ) ]] ; then
echo "-A ${SOME_FILE}-guestlist -p tcp -m multiport --dports ${SOME_PORT} -m conntrack ! --ctstate INVALID,NEW -m recent --name ${SOME_FILE}guestlist --rdest --update --seconds 60 -j accept-when-safe"
wait ;
echo "-A ${SOME_FILE}-guestlist -p tcp -m tcp ! --syn -m multiport --dports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rdest --remove -g just-accept"
wait ;
echo "-A ${SOME_FILE}-guestlist -p tcp -m multiport --dports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rdest --set -g accept-when-safe"
wait ;
fi
if [[ ( -e ${BASEFILEPATH:-./}/services/udp/${SOME_FILE} ) ]] ; then
echo "-A ${SOME_FILE}-guestlist -p udp -m multiport --dports ${SOME_PORT} -m conntrack ! --ctstate INVALID -m recent --name ${SOME_FILE}guestlist --rdest --update --seconds 60 -j just-accept"
wait ;
echo "-A ${SOME_FILE}-guestlist -p udp -m multiport --dports ${SOME_PORT} -m conntrack --ctstate INVALID -m recent --name ${SOME_FILE}guestlist --rdest --remove -g just-drop"
wait ;
echo "-A ${SOME_FILE}-guestlist -p udp -m multiport --dports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rdest --set -g just-accept"
fi

if [[ ( -e ${BASEFILEPATH:-./}/services/tcp/${SOME_FILE} ) ]] ; then
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --rcheck --seconds 60 -j accept-when-safe"
fi
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --rcheck --seconds 60 -j accept-when-safe"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --update --seconds 60 -j just-accept"
fi
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --update --seconds 60 -j just-accept"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --remove -g log-drop"
wait ;
fi
echo "-A check-${SOME_FILE}-guestlist -p tcp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --remove -g log-drop"
wait ;
fi
if [[ ( -e ${BASEFILEPATH:-./}/services/udp/${SOME_FILE} ) ]] ; then
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --update --seconds 60 -j just-accept"
wait ;
fi
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --update --seconds 60 -j just-accept"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --update --seconds 60 -j just-accept"
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --rcheck --seconds 120 -j just-accept"
wait ;
fi
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --rcheck --seconds 120 -j just-accept"
wait ;
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name proxy${SOME_FILE}guestlist --rsource --remove -g log-drop"
fi
echo "-A check-${SOME_FILE}-guestlist -p udp -m multiport --sports ${SOME_PORT} -m recent --name ${SOME_FILE}guestlist --rsource --remove -g log-drop"

fi
wait ;
done
# clean up
echo "-A ${SOME_FILE}-guestlist -g log-drop"
wait ;
echo ""
if [[ ( -e ${BASEFILEPATH:-./}/services/proxy/${SOME_FILE} ) ]] ; then
echo "-A ${SOME_FILE}-proxy-guestlist -g log-drop"
wait ;
echo ""
echo "-A check-${SOME_FILE}-guestlist -j LOG --log-prefix \"[NET FORWARD ${SOME_FILE} FAILED] \""
wait ;
fi
echo "-A check-${SOME_FILE}-guestlist -g just-drop"
wait ;
echo ""
fi
done

echo ""
wait ;

################
for TARGET_NAME in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/blacklist" | \grep -v -E "^[#[:space:]]*$" | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sort | uniq )
do
# block ads and ad seekers
echo "-A skip-if-ad-site -p udp -m string --algo bm --icase --string \"${TARGET_NAME}\" -g just-drop"
wait ;
echo "-A skip-if-ad-site -p tcp -m string --algo bm --icase --string \"${TARGET_NAME}\" -g just-drop"
wait ;

echo "-A skip-if-ad-site -p udp -m string --algo kmp --icase --string \"${TARGET_NAME}\" -g just-drop"
wait ;
echo "-A skip-if-ad-site -p tcp -m string --algo kmp --icase --string \"${TARGET_NAME}\" -g just-drop"

# add per port regular expression

wait ;

done

for TARGET_URL in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/blkurllist" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A skip-if-ad-site -p tcp -m multiport --ports 80,443 -m string --algo bm --icase --string \"${TARGET_URL}\" -g skip-ad-site"
wait ;

echo "-A skip-if-ad-site -p tcp -m multiport --ports 80,443 -m string --algo kmp --icase --string \"${TARGET_URL}\" -g skip-ad-site"
wait ;

wait ;

done


# TODO: improve this loop

for TARGET_NAME in $(\grep -E -v "^[#]+" "${BASEFILEPATH}/blacklist_ip" | \grep -v -E "^[#[:space:]]*$" )
do

echo "-A skip-if-ad-site -d ${TARGET_NAME} -g close-and-drop"
wait ;
echo "-A skip-if-ad-site -s ${TARGET_NAME} -g mark-as-blacklist"
wait ;
echo "-A check-if-blacklist -s ${TARGET_NAME} -g blacklist-defeat"
wait ;

done

echo "-A skip-if-ad-site -j RETURN"
wait ;


echo "-A check-if-blacklist -m recent --name blacklist --rsource --update -j blacklist-defeat"
echo "-A check-if-blacklist -m recent --name blacklist --rdest --rcheck -j blacklist-defeat"
echo "-A check-if-blacklist -j RETURN"
wait ;

echo ""
echo ""
echo "COMMIT"

echo ""

if [[ -f "${BASEFILEPATH}/tail.rules" ]] ; then

head -n 1000000 "${BASEFILEPATH}/tail.rules" ; wait ;

fi

echo ""

echo -n "#"
rm -f "${BASEFILEPATH}/used_chains.tmp" 2>/dev/null ;

exit 0;
